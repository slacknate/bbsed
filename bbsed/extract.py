import os
import shutil
import traceback

from collections import defaultdict

from PyQt5 import QtCore
from libpac import extract_pac

IMAGE_FILE_FMT = "char_{}_img.pac"
PALETTE_FILE_FMT = "char_{}_pal.pac"


class ExtractThread(QtCore.QThread):

    message = QtCore.pyqtSignal(str)

    def __init__(self, bbcf_install, data_dir, abbreviation):
        QtCore.QThread.__init__(self)
        self.abbreviation = abbreviation
        self.bbcf_install = bbcf_install
        self.data_dir = data_dir

        self.hip_images = []
        self.palette_info = defaultdict(list)

    def run(self):
        palette_cache_path = os.path.join(self.data_dir, self.abbreviation, "pal")
        image_cache_path = os.path.join(self.data_dir, self.abbreviation, "img")

        # TODO: we should probably do a more robust check than this... what if palette files are missing?
        if not os.path.exists(palette_cache_path):
            os.makedirs(palette_cache_path)

            pac_file_name = PALETTE_FILE_FMT.format(self.abbreviation)
            pac_file_dir = os.path.join(self.bbcf_install, "data", "Char")
            pac_file_path = os.path.join(pac_file_dir, pac_file_name)

            pac_backup_path = pac_file_path.replace(".pac", ".orig.pac")
            if not os.path.exists(pac_backup_path):
                self.message.emit("Backing up palette files...")
                shutil.copyfile(pac_file_path, pac_backup_path)

            try:
                self.message.emit("Extracting palette files...")
                extract_pac(pac_file_path, palette_cache_path)

            # FIXME: LOL
            except Exception:
                traceback.print_exc()
                return

        # Iterate our cached palette files and create a mapping of palette IDs to a list of associated files.
        # A palette ID is the in-game palette number you choose at character select.
        for hpl_file in os.listdir(palette_cache_path):
            palette_num = hpl_file[2:4]
            palette_num_in_game = int(palette_num) + 1
            palette_id = f"{palette_num_in_game:02}"
            self.palette_info[palette_id].append(hpl_file)

        # TODO: we should probably do a more robust check than this... what if image files are missing?
        if not os.path.exists(image_cache_path):
            os.makedirs(image_cache_path)

            img_file_name = IMAGE_FILE_FMT.format(self.abbreviation)
            img_file_path = os.path.join(self.bbcf_install, "data", "Char", img_file_name)

            try:
                self.message.emit("Extracting image files...")
                extract_pac(img_file_path, image_cache_path)

            # FIXME: LOL
            except Exception:
                traceback.print_exc()
                return

        # Iterate our cached image files and maintain a list of the HIP files.
        # This list is used as a user-facing file list, as these are the actual game files.
        # Any PNGs generated by the tool are "internal".
        for hip_image in os.listdir(image_cache_path):
            if hip_image.endswith(".hip"):
                self.hip_images.append(hip_image)
